import React from 'react';
import AJV from 'ajv';
import RefParser from 'json-schema-ref-parser';
import { JsonFormsCellRendererRegistryEntry, JsonFormsCore, JsonFormsProps, JsonFormsRendererRegistryEntry, JsonFormsUISchemaRegistryEntry, JsonSchema, OwnPropsOfJsonFormsRenderer, UISchemaElement, ValidationMode } from '@jsonforms/core';
interface JsonFormsRendererState {
    id: string;
    schema: JsonSchema;
    resolving: boolean;
    resolvedSchema: JsonSchema;
}
export interface JsonFormsReactProps {
    onChange?(state: Pick<JsonFormsCore, 'data' | 'errors'>): void;
}
export declare class ResolvedJsonFormsDispatchRenderer extends React.Component<JsonFormsProps, JsonFormsRendererState> {
    static getDerivedStateFromProps(nextProps: JsonFormsProps, prevState: JsonFormsRendererState): JsonFormsRendererState;
    mounted: boolean;
    constructor(props: JsonFormsProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    resolveAndUpdateSchema: (props: JsonFormsProps) => void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export declare class JsonFormsDispatchRenderer extends ResolvedJsonFormsDispatchRenderer {
    constructor(props: JsonFormsProps);
}
export declare const JsonFormsDispatch: React.MemoExoticComponent<(props: OwnPropsOfJsonFormsRenderer & JsonFormsReactProps) => JSX.Element>;
export declare const ResolvedJsonFormsDispatch: React.MemoExoticComponent<(props: OwnPropsOfJsonFormsRenderer & JsonFormsReactProps) => JSX.Element>;
export interface JsonFormsInitStateProps {
    data: any;
    schema?: JsonSchema;
    uischema?: UISchemaElement;
    renderers: JsonFormsRendererRegistryEntry[];
    cells?: JsonFormsCellRendererRegistryEntry[];
    ajv?: AJV.Ajv;
    refParserOptions?: RefParser.Options;
    config?: any;
    uischemas?: JsonFormsUISchemaRegistryEntry[];
    readonly?: boolean;
    validationMode?: ValidationMode;
}
export declare const JsonForms: (props: JsonFormsInitStateProps & JsonFormsReactProps) => JSX.Element;
export {};
