"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
  The MIT License
  
  Copyright (c) 2017-2019 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
var react_1 = tslib_1.__importDefault(require("react"));
var filter_1 = tslib_1.__importDefault(require("lodash/fp/filter"));
var map_1 = tslib_1.__importDefault(require("lodash/fp/map"));
var flow_1 = tslib_1.__importDefault(require("lodash/fp/flow"));
var filter_2 = tslib_1.__importDefault(require("lodash/filter"));
var join_1 = tslib_1.__importDefault(require("lodash/join"));
var keys_1 = tslib_1.__importDefault(require("lodash/fp/keys"));
var startCase_1 = tslib_1.__importDefault(require("lodash/fp/startCase"));
var core_1 = require("@jsonforms/core");
var react_2 = require("@jsonforms/react");
var util_1 = require("../util");
var createLabelDescriptionFrom = core_1.Helpers.createLabelDescriptionFrom, convertToValidClassName = core_1.Helpers.convertToValidClassName;
var or = core_1.Test.or, isObjectArrayControl = core_1.Test.isObjectArrayControl, isPrimitiveArrayControl = core_1.Test.isPrimitiveArrayControl, rankWith = core_1.Test.rankWith;
/**
 * Alternative tester for an array that also checks whether the 'table'
 * option is set.
 * @type {RankedTester}
 */
exports.tableArrayControlTester = rankWith(3, or(isObjectArrayControl, isPrimitiveArrayControl));
var TableArrayControl = /** @class */ (function (_super) {
    tslib_1.__extends(TableArrayControl, _super);
    function TableArrayControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.confirmDelete = function (path, index) {
            var p = path.substring(0, path.lastIndexOf(('.')));
            _this.props.removeItems(p, [index])();
        };
        return _this;
    }
    TableArrayControl.prototype.render = function () {
        var _this = this;
        var _a = this.props, addItem = _a.addItem, uischema = _a.uischema, schema = _a.schema, rootSchema = _a.rootSchema, path = _a.path, data = _a.data, visible = _a.visible, errors = _a.errors, label = _a.label, getStyleAsClassName = _a.getStyleAsClassName, childErrors = _a.childErrors;
        var controlElement = uischema;
        var tableClass = getStyleAsClassName('array.table.table');
        var labelClass = getStyleAsClassName('array.table.label');
        var buttonClass = getStyleAsClassName('array.table.button');
        var validationClass = getStyleAsClassName('array.table.validation');
        var controlClass = [
            getStyleAsClassName('array.table'),
            convertToValidClassName(controlElement.scope)
        ].join(' ');
        var createControlElement = function (key) { return ({
            type: 'Control',
            label: false,
            scope: schema.type === 'object' ? "#/properties/" + key : '#'
        }); };
        var labelObject = createLabelDescriptionFrom(controlElement, schema);
        var isValid = errors.length === 0;
        var divClassNames = [validationClass]
            .concat(isValid ? '' : getStyleAsClassName('array.table.validation.error'))
            .join(' ');
        var labelText = core_1.isPlainLabel(label) ? label : label.default;
        return (react_1.default.createElement("div", { className: controlClass, hidden: !visible },
            react_1.default.createElement("header", null,
                react_1.default.createElement("label", { className: labelClass }, labelText),
                react_1.default.createElement("button", { className: buttonClass, onClick: addItem(path, core_1.createDefaultValue(schema)) },
                    "Add to ",
                    labelObject.text)),
            react_1.default.createElement("div", { className: divClassNames }, !isValid ? errors : ''),
            react_1.default.createElement("table", { className: tableClass },
                react_1.default.createElement("thead", null,
                    react_1.default.createElement("tr", null,
                        schema.properties ? (flow_1.default(keys_1.default, filter_1.default(function (prop) { return schema.properties[prop].type !== 'array'; }), map_1.default(function (prop) { var _a; return react_1.default.createElement("th", { key: prop }, (_a = schema.properties[prop].title) !== null && _a !== void 0 ? _a : startCase_1.default(prop)); }))(schema.properties)) : (react_1.default.createElement("th", null, "Items")),
                        react_1.default.createElement("th", null, "Valid"),
                        react_1.default.createElement("th", null, "\u00A0"))),
                react_1.default.createElement("tbody", null, !data || !Array.isArray(data) || data.length === 0 ? (react_1.default.createElement("tr", null,
                    react_1.default.createElement("td", null, "No data"))) : (data.map(function (_child, index) {
                    var childPath = core_1.Paths.compose(path, "" + index);
                    // TODO
                    var errorsPerEntry = filter_2.default(childErrors, function (error) {
                        return error.dataPath.startsWith(childPath);
                    });
                    var validationClassName = getStyleAsClassName('array.validation');
                    var errorValidationClassName = getStyleAsClassName('array.validation.error');
                    var errorClassNames = errorsPerEntry ?
                        [validationClassName].concat(errorValidationClassName).join(' ') :
                        validationClassName;
                    return (react_1.default.createElement("tr", { key: childPath },
                        schema.properties ? (flow_1.default(keys_1.default, filter_1.default(function (prop) { return schema.properties[prop].type !== 'array'; }), map_1.default(function (prop) {
                            var childPropPath = core_1.Paths.compose(childPath, prop.toString());
                            return (react_1.default.createElement("td", { key: childPropPath },
                                react_1.default.createElement(react_2.DispatchCell, { schema: core_1.Resolve.schema(schema, "#/properties/" + prop, rootSchema), uischema: createControlElement(prop), path: childPath + '.' + prop })));
                        }))(schema.properties)) : (react_1.default.createElement("td", { key: core_1.Paths.compose(childPath, index.toString()) },
                            react_1.default.createElement(react_2.DispatchCell, { schema: schema, uischema: createControlElement(), path: childPath }))),
                        react_1.default.createElement("td", null, errorsPerEntry ? (react_1.default.createElement("span", { className: errorClassNames }, join_1.default(errorsPerEntry.map(function (e) { return e.message; }), ' and '))) : (react_1.default.createElement("span", { className: errorClassNames }, "OK"))),
                        react_1.default.createElement("td", null,
                            react_1.default.createElement("button", { "aria-label": "Delete", onClick: function () {
                                    if (window.confirm('Are you sure you wish to delete this item?')) {
                                        _this.confirmDelete(childPath, index);
                                    }
                                } }, "Delete"))));
                }))))));
    };
    return TableArrayControl;
}(react_1.default.Component));
exports.default = util_1.withVanillaControlProps(react_2.withJsonFormsArrayControlProps(TableArrayControl));
//# sourceMappingURL=TableArrayControl.js.map